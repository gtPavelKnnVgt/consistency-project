version: '3.8'

services:
  # PostgreSQL
  postgres:
    image: postgres:latest
    container_name: admiring_ishizaka
    environment:
      POSTGRES_DB: test
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
    networks:
      - app-network

  # Kafka
  kafka:
    image: bitnami/kafka:latest
    container_name: broker
    environment:
      KAFKA_CFG_PROCESS_ROLES: "broker,controller" # Роли процесса Kafka
      KAFKA_CFG_NODE_ID: "1" # Уникальный идентификатор узла
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@broker:9093" # Кворум контроллеров
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093" # Прослушиваемые порты
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT" # Протоколы безопасности
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://broker:9092" # Адрес для клиентов
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER" # Протокол для контроллера
      ALLOW_PLAINTEXT_LISTENER: "yes" # Разрешение использования незащищенного соединения
    ports:
      - "9092:9092" # Порт для клиентов
      - "9093:9093" # Порт для контроллера
    networks:
      - app-network

  # Zipkin
  zipkin:
    image: openzipkin/zipkin
    container_name: xenodochial_bardeen
    ports:
      - "9411:9411"
    networks:
      - app-network


  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana-storage:/var/lib/grafana # Постоянное хранилище для Grafana
    networks:
      - app-network

# Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - app-network


  # Ваше приложение
  app:
    image: app:latest
    container_name: demo-app
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - postgres
      - kafka
      - zipkin
      - prometheus
    networks:
      - app-network

# Kafka Exporter
  kafka-exporter:
    image: bitnami/kafka-exporter:latest
    container_name: kafka-exporter
    depends_on:
      - kafka
    environment:
      KAFKA_BROKERS: kafka:9092
    ports:
      - "9308:9308" # Порт для сбора метрик
    restart: always
    networks:
      - app-network


networks:
  app-network:
    driver: bridge

volumes:
  grafana-storage: # Volume для Grafana
